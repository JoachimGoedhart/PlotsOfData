setwd("~/surfdrive/R-project/Effect-Median")
setwd("~/")
# Script that:
# Reads csv file (with header), assuming the first serie is the control
# Calculates median and 95%CI by a percentile bootstrap
# Calculates the difference between medians and the 95%CI, reflecting the magnitude and uncertainty of the difference
# Plots: (A) the data, the median and 95% CI (B) median difference and the 95%CI + the distribution of median differences
# Created by:
# Joachim Goedhart, @joachimgoedhart, 2018
#Requires the packages ggplot2, gridExtra, tidyr
require(ggplot2)
require(gridExtra)
require(tidyr)
#Requires a new geom for ggplot2 that plots half of a violin plot (for the distribution of bootstrapped differences)
source("surfdrive/R-project/Effect-Median/geom_flat_violin.R")
#Function that resamples a vector (with replacement) and calculates the median value
boot_median = function(x) {
median(sample(x, replace = TRUE))
}
#Number of bootstrap samples
nsteps=1000
#Confidence level
Confidence_Percentage = 99
Confidence_level = Confidence_Percentage/100
alpha=1-Confidence_level
lower_percentile=(1-Confidence_level)/2
upper_percentile=1-((1-Confidence_level)/2)
i=0
#Read the (tidy) data in csv format
df_raw_wide <- read.csv("surfdrive/R-project/Effect-Median/Data_wide.csv")
#Force the first column to be labeled as "Control"
colnames(df_raw_wide)[1] <- "Control"
#Convert the wide data to a long format (and remove NA)
df_raw_data <-  na.omit(gather(df_raw_wide, Condition, value))
#Generate a dataframe that keeps a summary of the data
df_summary <- data.frame(Condition=levels(factor(df_raw_data$Condition)), n=tapply(df_raw_data$value, df_raw_data$Condition, length), median=tapply(df_raw_data$value, df_raw_data$Condition, median))
#Generate a dataframe that collects all bootstrapped median values
df_all_new_medians <- data.frame(Condition=levels(factor(df_raw_data$Condition)), resampled_median=tapply(df_raw_data$value, df_raw_data$Condition, boot_median), id=i)
#####################################################################################
######################## Calculate Median and 95%CI by bootstrap ###################
#Perform the resampling nsteps number of times (typically 1,000-10,000x)
for (i in 1:nsteps) {
#Caclulate the median from a boostrapped sample (resampled_median) and add to the dataframe
df_boostrapped_median <- data.frame(Condition=levels(factor(df_raw_data$Condition)), resampled_median=tapply(df_raw_data$value, df_raw_data$Condition, boot_median), id=i)
#Add the new median to a datafram that collects all the resampled median values
df_all_new_medians <- bind_rows(df_all_new_medians, df_boostrapped_median)
}
#Uncomment to plot result of the bootsrap
#ggplot(df_all_new_medians, aes(Condition, resampled_median)) + geom_flat_violin(aes(fill=Condition), position = position_nudge(x = .2, y = 0))
#Calculate the confidence interval of the boostrapped medians, based on percentiles, and add to the dataframe that summarizes the data
df_summary$ci_median_hi <- tapply(df_all_new_medians$resampled_median, df_all_new_medians$Condition, quantile, probs=upper_percentile)
df_summary$ci_median_lo <- tapply(df_all_new_medians$resampled_median, df_all_new_medians$Condition, quantile, probs=lower_percentile)
#####################################################################################
############ Generate dataframe with differences between the Median and 95%CI  ######
#Order by Condition
#df_all_new_medians[order(df_all_new_medians$Condition),]
#Convert the boostrapped dataset from long to wide format
df_spread <- spread(df_all_new_medians, key=Condition, value=resampled_median)
#Subtract the Column with " Control" from the other columns and move these 'differences' into a new dataframe
df_spread_differences <- df_spread[,2:ncol(df_spread)] - df_spread[,"Control"]
#Convert the dataframe with differences between medians into a long format
df_differences <- gather(df_spread_differences, Condition, diff_median)
#Calculate the summary of the differences and put these values in a dataframe 'df_diff_summary'
df_diff_summary <- data.frame(Condition=levels(factor(df_raw_data$Condition)), diff_median=tapply(df_differences$diff_median, df_differences$Condition, median))
#Determine the CI of the differences, based on percentiles, and add to the dataframe that summarizes the differences
df_diff_summary$ci_median_hi <- tapply(df_differences$diff_median, df_differences$Condition, quantile, probs=upper_percentile)
df_diff_summary$ci_median_lo <- tapply(df_differences$diff_median, df_differences$Condition, quantile, probs=lower_percentile)
#Sort dataframe Conditions according to median value
df_summary$Condition <- reorder (df_summary$Condition, df_summary$median)
df_raw_data$Condition <- reorder (df_raw_data$Condition, df_raw_data$value, median)
#Sort dataframe Conditions according to median difference
df_diff_summary$Condition <- reorder (df_diff_summary$Condition, df_diff_summary$diff_median)
df_differences$Condition <- reorder (df_differences$Condition, df_differences$diff_median)
##################### Generate plots for output ###################
######### PLOT with raw data + median and Confidence Interval ########
medianplot <- ggplot(df_summary, aes(x = Condition, y = median, color=Condition))+geom_jitter(data = df_raw_data, aes(x=Condition, y=value), position=position_jitter(0.3), cex=1, alpha=0.4)+
geom_linerange(aes(ymin = ci_median_lo, ymax = ci_median_hi), color="black", size =1, data = df_summary)+
geom_point(aes(y = median), shape = 21,color = "black",fill=NA,size = 3, data = df_summary)+
ggtitle(paste("Median and ",Confidence_Percentage,"%CI",sep=""))  +
ylab("Value [-]")+theme_light(base_size = 14) +
theme(panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) + theme(axis.text.y = element_text(size=12))+theme(legend.position="none")+
#Set the axis limits here - autoscale if not set
#ylim(-0.02,0.3)+
coord_flip()
########### PLOT with distribution of differences, median difference and Confidence Interval ########
effectplot <- ggplot(df_differences, aes(x = Condition, y = diff_median))+
geom_flat_violin(aes(x=Condition, fill=Condition),position = position_nudge(x = 0, y = 0), color=NA,scale = "width", alpha =0.7,data = df_differences)+ geom_linerange(aes(y= diff_median, ymin = ci_median_lo, ymax = ci_median_hi), color="black", size =1, data = df_diff_summary)+
geom_point(aes(y = diff_median), shape = 21,color = "black",fill=NA,size = 3,data = df_diff_summary)+
geom_hline(yintercept = 0, col = "black", size = .5) +
ggtitle(paste("Difference and ",Confidence_Percentage,"%CI",sep=""))+ylab("Difference [-]")+theme_light(base_size = 14) + theme(panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) + theme(axis.text.y = element_text(size=12))+
#Set the axis limits here - autoscale if not set
#ylim(-0.05,0.3)+
coord_flip()
grid.arrange(medianplot, effectplot, ncol=2, nrow=1)
View(df_all_new_medians)
View(df_diff_summary)
View(df_differences)
install.packages(c("MASS", "Matrix", "Rcpp", "XML", "bindrcpp", "classInt", "cluster", "curl", "data.table", "digest", "foreign", "hexbin", "httpuv", "kernlab", "later", "maps", "mgcv", "mvtnorm", "openssl", "processx", "rlang", "robustbase", "rpart", "sf", "sourcetools", "stringi", "stringr", "survival", "tibble", "tidyr", "tidyselect", "xml2", "yaml"))
install.packages(c("MASS", "Matrix", "Rcpp", "XML", "bindrcpp", "classInt", "cluster", "curl", "data.table", "digest", "foreign", "hexbin", "httpuv", "kernlab", "later", "maps", "mgcv", "mvtnorm", "openssl", "processx", "rlang", "robustbase", "rpart", "sf", "sourcetools", "stringi", "stringr", "survival", "tibble", "tidyr", "tidyselect", "xml2", "yaml"))
install.packages(c("MASS", "Matrix", "Rcpp", "XML", "bindrcpp", "classInt", "cluster", "curl", "data.table", "digest", "foreign", "hexbin", "httpuv", "kernlab", "later", "maps", "mgcv", "mvtnorm", "openssl", "processx", "rlang", "robustbase", "rpart", "sf", "sourcetools", "stringi", "stringr", "survival", "tibble", "tidyr", "tidyselect", "xml2", "yaml"))
install.packages(c("MASS", "Matrix", "Rcpp", "XML", "bindrcpp", "classInt", "cluster", "curl", "data.table", "digest", "foreign", "hexbin", "httpuv", "kernlab", "later", "maps", "mgcv", "mvtnorm", "openssl", "processx", "rlang", "robustbase", "rpart", "sf", "sourcetools", "stringi", "stringr", "survival", "tibble", "tidyr", "tidyselect", "xml2", "yaml"))
install.packages(c("MASS", "Matrix", "Rcpp", "XML", "bindrcpp", "classInt", "cluster", "curl", "data.table", "digest", "foreign", "hexbin", "httpuv", "kernlab", "later", "maps", "mgcv", "mvtnorm", "openssl", "processx", "rlang", "robustbase", "rpart", "sf", "sourcetools", "stringi", "stringr", "survival", "tibble", "tidyr", "tidyselect", "xml2", "yaml"))
shiny::runApp('surfdrive/Shiny-project/ComPlot')
runApp('surfdrive/Shiny-project/ComPlot')
shiny::runApp('surfdrive/Shiny-project/ComPlotta')
runApp('surfdrive/Shiny-project/ComPlotta')
runApp('surfdrive/Shiny-project/ComPlotta')
runApp('surfdrive/Shiny-project/ComPlotta')
runApp('surfdrive/Shiny-project/ComPlotta')
runApp('surfdrive/Shiny-project/ComPlotta')
runApp('surfdrive/Shiny-project/ComPlotta')
runApp('surfdrive/Shiny-project/ComPlotta')
runApp('surfdrive/Shiny-project/ComPlotta')
runApp('surfdrive/Shiny-project/ComPlotta')
runApp('surfdrive/Shiny-project/ComPlotta')
runApp('surfdrive/Shiny-project/ComPlotta')
runApp('surfdrive/Shiny-project/ComPlotta')
shiny::runApp('surfdrive/Shiny-project/ComPlotta')
shiny::runApp('surfdrive/Shiny-project/ComPlotta')
runApp('surfdrive/Shiny-project/ComPlotta')
runApp('surfdrive/Shiny-project/ComPlotta')
runApp('surfdrive/Shiny-project/ComPlotta')
runApp('surfdrive/Shiny-project/ComPlotta')
runApp('surfdrive/Shiny-project/ComPlotta')
runApp('surfdrive/Shiny-project/ComPlotta')
runApp('surfdrive/Shiny-project/ComPlotta')
runApp('surfdrive/Shiny-project/ComPlotta')
runApp('surfdrive/Shiny-project/ComPlotta')
runApp('surfdrive/Shiny-project/ComPlotta')
runApp('surfdrive/Shiny-project/ComPlotta')
runApp('surfdrive/Shiny-project/ComPlotta')
runApp('surfdrive/Shiny-project/ComPlotta')
runApp('surfdrive/Shiny-project/ComPlotta')
runApp('surfdrive/Shiny-project/ComPlotta')
runApp('surfdrive/Shiny-project/ComPlotta')
runApp('surfdrive/Shiny-project/ComPlotta')
runApp('surfdrive/Shiny-project/ComPlotta')
shiny::runApp('surfdrive/Shiny-project/Plot-timelapse-data')
shiny::runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
shiny::runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
shiny::runApp('surfdrive/Shiny-project/ComPlotTa')
shiny::runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
View(df_all_new_medians)
View(df_boostrapped_median)
View(df_diff_summary)
View(df_boostrapped_median)
View(df_all_new_medians)
View(df_all_new_medians)
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
shiny::runApp('surfdrive/Shiny-project/ComPlotTa')
shiny::runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
shiny::runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/ComPlotTa')
runApp('surfdrive/Shiny-project/ComPlotTa')
shiny::runApp('surfdrive/Shiny-project/Plotsofdata')
runApp('surfdrive/Shiny-project/Plotsofdata')
shiny::runApp('surfdrive/Shiny-project/Plotsofdata')
runApp('surfdrive/Shiny-project/Plotsofdata')
runApp('surfdrive/Shiny-project/Plotsofdata')
runApp('surfdrive/Shiny-project/Plotsofdata')
runApp('surfdrive/Shiny-project/Plotsofdata')
runApp('surfdrive/Shiny-project/Plotsofdata')
runApp('surfdrive/Shiny-project/Plotsofdata')
runApp('surfdrive/Shiny-project/Plotsofdata')
runApp('surfdrive/Shiny-project/Plotsofdata')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
df_raw_data
df_raw_data$indentifier <- "control"
df_raw_data
shiny::runApp('surfdrive/Shiny-project/Multiple-file-upload')
runApp('surfdrive/Shiny-project/Multiple-file-upload')
shiny::runApp('surfdrive/Shiny-project/Multiple-file-upload')
runApp('surfdrive/Shiny-project/Multiple-file-upload')
runApp('surfdrive/Shiny-project/Multiple-file-upload')
library(shiny)
library(data.table)
runApp('surfdrive/Shiny-project/Multiple-file-upload')
runApp('surfdrive/Shiny-project/Multiple-file-upload')
runApp('surfdrive/Shiny-project/Multiple-file-upload')
runApp('surfdrive/Shiny-project/Multiple-file-upload')
runApp('surfdrive/Shiny-project/Multiple-file-upload')
runApp('surfdrive/Shiny-project/Multiple-file-upload')
runApp('surfdrive/Shiny-project/Multiple-file-upload')
runApp('surfdrive/Shiny-project/Multiple-file-upload')
runApp('surfdrive/Shiny-project/Multiple-file-upload')
runApp('surfdrive/Shiny-project/Multiple-file-upload')
runApp('surfdrive/Shiny-project/Multiple-file-upload')
runApp('surfdrive/Shiny-project/Multiple-file-upload')
runApp('surfdrive/Shiny-project/Multiple-file-upload')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist_v1')
runApp('surfdrive/Shiny-project/PlotTwist_v1')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
runApp('surfdrive/Shiny-project/PlotTwist')
install.packages("ggplot2")
install.packages("tidyverse")
shiny::runGitHub('PlotsOfData', 'JoachimGoedhart')
shiny::runApp('surfdrive/Shiny-project/Plotsofdata')
runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runGitHub('PlotsOfData', 'JoachimGoedhart')
shiny::runGitHub('PlotTwist', 'JoachimGoedhart')
shiny::runApp('surfdrive/Shiny-project/PlotTwist')
shiny::runApp()
runApp()
1/2
int(1/2)
integer(1/2)
integer(1/1)
integer(4/4)
integer(4/2)
integer(4/3)
integer(3/2)
integer(4/2)
round(2/1)
round(2/2)
round(3/2
)
round(3/2)
floor(3/2)
floor(19/20)
floor(21/20)
runApp()
runApp()
runApp('~/surfdrive/Shiny-project/Plotsofdata')
runApp()
runApp('~/surfdrive/Shiny-project/Plotsofdata')
