# Script that:#
# Reads csv file (with header), assuming the first serie is the control#
# Calculates median and 95%CI by a percentile bootstrap#
# Calculates the difference between medians and the 95%CI, reflecting the magnitude and uncertainty of the difference#
# Plots: (A) the data, the median and 95% CI (B) median difference and the 95%CI + the distribution of median differences#
#
# Created by: #
# Joachim Goedhart, @joachimgoedhart, 2018#
#Requires the packages ggplot2, gridExtra, tidyr#
require(ggplot2)#
require(gridExtra)#
require(tidyr)#
#
#Requires a new geom for ggplot2 that plots half of a violin plot (for the distribution of bootstrapped differences)#
source("surfdrive/R-project/Effect-Median/geom_flat_violin.R")#
#
#Function that resamples a vector (with replacement) and calculates the median value#
boot_median = function(x) {#
  median(sample(x, replace = TRUE))#
}#
#
#Number of bootstrap samples#
nsteps=1000#
#
#Confidence level#
Confidence_level = 0.95#
#
alpha=1-Confidence_level#
lower_percentile=(alpha/2)#
upper_percentile=1-(alpha/2)#
#
i=0#
#
#Read the (tidy) data in csv format#
df_raw_data <- read.csv("surfdrive/R-project/Effect-Median/Cdc42_slopes.csv")#
#
#Generate a dataframe that keeps a summary of the data#
df_summary <- data.frame(Condition=levels(df_raw_data$Condition), n=tapply(df_raw_data$ratio, df_raw_data$Condition, length), median=tapply(df_raw_data$ratio, df_raw_data$Condition, median))#
#
#Generate a dataframe that collects all bootstrapped median values#
df_all_new_medians <- data.frame(Condition=levels(df_raw_data$Condition), resampled_median=tapply(df_raw_data$ratio, df_raw_data$Condition, boot_median), id=i)#
######################################################################################
######################## Calculate Median and 95%CI by bootstrap ####################
Perform the resampling nsteps number of times (typically 1,000-10,000x)#
for (i in 1:nsteps) {#
#
	#Caclulate the median from a boostrapped sample (resampled_median) and add to the dataframe#
	df_boostrapped_median <- data.frame(Condition=levels(df_raw_data$Condition), resampled_median=tapply(df_raw_data$ratio, df_raw_data$Condition, boot_median), id=i)#
	#Add the new median to a datafram that collects all the resampled median values#
	df_all_new_medians <- bind_rows(df_all_new_medians, df_boostrapped_median)#
#
}#
#Uncomment to plot result of the bootsrap#
#ggplot(df_all_new_medians, aes(Condition, resampled_median)) + geom_flat_violin(aes(fill=Condition), position = position_nudge(x = .2, y = 0))#
#Calculate the confidence interval of the boostrapped medians, based on percentiles, and add to the dataframe that summarizes the data#
df_summary$ci_median_hi <- tapply(df_all_new_medians$resampled_median, df_all_new_medians$Condition, quantile, probs=upper_percentile)#
df_summary$ci_median_lo <- tapply(df_all_new_medians$resampled_median, df_all_new_medians$Condition, quantile, probs=lower_percentile)#
######################################################################################
############ Generate dataframe with differences between the Median and 95%CI  #######
#
#Order by Condition#
#df_all_new_medians[order(df_all_new_medians$Condition),]#
#
#Convert the boostrapped dataset from long to wide format#
df_spread <- spread(df_all_new_medians, key=Condition, value=resampled_median)#
#
#Subtract the Column with " Control" from the other columns and move these 'differences' into a new dataframe#
df_spread_differences <- df_spread[,2:ncol(df_spread)] - df_spread[," Control"]#
#
#Convert the dataframe with differences between medians into a long format#
df_differences <- gather(df_spread_differences, Condition, diff_median)#
#
#Calculate the summary of the differences and put these values in a dataframe 'df_diff_summary'#
df_diff_summary <- data.frame(Condition=levels(df_raw_data$Condition), diff_median=tapply(df_differences$diff_median, df_differences$Condition, median))#
#
#Determine the CI of the differences, based on percentiles, and add to the dataframe that summarizes the differences#
df_diff_summary$ci_median_hi <- tapply(df_differences$diff_median, df_differences$Condition, quantile, probs=upper_percentile)#
df_diff_summary$ci_median_lo <- tapply(df_differences$diff_median, df_differences$Condition, quantile, probs=lower_percentile)#
##################### Generate plots for output ####################
######### PLOT with raw data + median and Confidence Interval #########
medianplot <- ggplot(df_summary, aes(x = Condition, y = median, color=Condition))+geom_jitter(data = df_raw_data, aes(x=Condition, y=ratio), position=position_jitter(0.1), cex=1, alpha=0.4)+#
#geom_errorbar(aes(ymin=median, ymax=median), width=.2, color="black") +#
 geom_linerange(aes(ymin = ci_median_lo, ymax = ci_median_hi), color="black", size =1, data = df_summary)+#
#
#geom_pointrange(aes(y = median, ymin = lower_ci, ymax = upper_ci), shape = 21,color = "black",fill=NA,size = 3, stroke=1, data = my_data_booted_summary)+#
#
geom_point(aes(y = median), shape = 21,color = "black",fill=NA,size = 3, data = df_summary) +#
ggtitle("Median and 95%CI")  +ylab("Value [-]")+theme_light(base_size = 14) + theme(panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) + theme(axis.text.y = element_text(size=12))+theme(legend.position="none")+ ylim(0.5,1.5)+coord_flip()#
#
########### PLOT with distribution of differences, median difference and Confidence Interval #########
effectplot <- ggplot(df_differences, aes(x = Condition, y = diff_median))+#
geom_flat_violin(aes(x=Condition, fill=Condition),position = position_nudge(x = 0, y = 0), color=NA, data = df_differences)+ geom_linerange(aes(y= diff_median, ymin = ci_median_lo, ymax = ci_median_hi), color="black", size =1, data = df_diff_summary)+#
geom_point(aes(y = diff_median), shape = 21,color = "black",fill=NA,size = 3,data = df_diff_summary)+#
#
geom_hline(yintercept = 0, col = "black", size = .5) +#
ggtitle("Difference of medians")+ylab("Difference [-]")+theme_light(base_size = 14) + theme(panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) + theme(axis.text.y = element_text(size=12))+ ylim(-0.05,0.3)+coord_flip()#
 grid.arrange(medianplot, effectplot, ncol=2, nrow=1)
require(ggplot2)#
require(gridExtra)#
require(tidyr)
#Requires a new geom for ggplot2 that plots half of a violin plot (for the distribution of bootstrapped differences)#
source("surfdrive/R-project/Effect-Median/geom_flat_violin.R")#
#
#Function that resamples a vector (with replacement) and calculates the median value#
boot_median = function(x) {#
  median(sample(x, replace = TRUE))#
}#
#
#Number of bootstrap samples#
nsteps=1000#
#
#Confidence level#
Confidence_level = 0.95#
#
alpha=1-Confidence_level#
lower_percentile=(alpha/2)#
upper_percentile=1-(alpha/2)#
#
i=0#
#
#Read the (tidy) data in csv format#
df_raw_data <- read.csv("surfdrive/R-project/Effect-Median/Cdc42_slopes.csv")#
#
#Generate a dataframe that keeps a summary of the data#
df_summary <- data.frame(Condition=levels(df_raw_data$Condition), n=tapply(df_raw_data$ratio, df_raw_data$Condition, length), median=tapply(df_raw_data$ratio, df_raw_data$Condition, median))#
#
#Generate a dataframe that collects all bootstrapped median values#
df_all_new_medians <- data.frame(Condition=levels(df_raw_data$Condition), resampled_median=tapply(df_raw_data$ratio, df_raw_data$Condition, boot_median), id=i)#
######################################################################################
######################## Calculate Median and 95%CI by bootstrap ####################
Perform the resampling nsteps number of times (typically 1,000-10,000x)#
for (i in 1:nsteps) {#
#
	#Caclulate the median from a boostrapped sample (resampled_median) and add to the dataframe#
	df_boostrapped_median <- data.frame(Condition=levels(df_raw_data$Condition), resampled_median=tapply(df_raw_data$ratio, df_raw_data$Condition, boot_median), id=i)#
	#Add the new median to a datafram that collects all the resampled median values#
	df_all_new_medians <- bind_rows(df_all_new_medians, df_boostrapped_median)#
#
}#
#Uncomment to plot result of the bootsrap#
#ggplot(df_all_new_medians, aes(Condition, resampled_median)) + geom_flat_violin(aes(fill=Condition), position = position_nudge(x = .2, y = 0))#
#Calculate the confidence interval of the boostrapped medians, based on percentiles, and add to the dataframe that summarizes the data#
df_summary$ci_median_hi <- tapply(df_all_new_medians$resampled_median, df_all_new_medians$Condition, quantile, probs=upper_percentile)#
df_summary$ci_median_lo <- tapply(df_all_new_medians$resampled_median, df_all_new_medians$Condition, quantile, probs=lower_percentile)#
######################################################################################
############ Generate dataframe with differences between the Median and 95%CI  #######
#
#Order by Condition#
#df_all_new_medians[order(df_all_new_medians$Condition),]#
#
#Convert the boostrapped dataset from long to wide format#
df_spread <- spread(df_all_new_medians, key=Condition, value=resampled_median)#
#
#Subtract the Column with " Control" from the other columns and move these 'differences' into a new dataframe#
df_spread_differences <- df_spread[,2:ncol(df_spread)] - df_spread[," Control"]#
#
#Convert the dataframe with differences between medians into a long format#
df_differences <- gather(df_spread_differences, Condition, diff_median)#
#
#Calculate the summary of the differences and put these values in a dataframe 'df_diff_summary'#
df_diff_summary <- data.frame(Condition=levels(df_raw_data$Condition), diff_median=tapply(df_differences$diff_median, df_differences$Condition, median))#
#
#Determine the CI of the differences, based on percentiles, and add to the dataframe that summarizes the differences#
df_diff_summary$ci_median_hi <- tapply(df_differences$diff_median, df_differences$Condition, quantile, probs=upper_percentile)#
df_diff_summary$ci_median_lo <- tapply(df_differences$diff_median, df_differences$Condition, quantile, probs=lower_percentile)#
##################### Generate plots for output ####################
######### PLOT with raw data + median and Confidence Interval #########
medianplot <- ggplot(df_summary, aes(x = Condition, y = median, color=Condition))+geom_jitter(data = df_raw_data, aes(x=Condition, y=ratio), position=position_jitter(0.1), cex=1, alpha=0.4)+#
#geom_errorbar(aes(ymin=median, ymax=median), width=.2, color="black") +#
 geom_linerange(aes(ymin = ci_median_lo, ymax = ci_median_hi), color="black", size =1, data = df_summary)+#
#
#geom_pointrange(aes(y = median, ymin = lower_ci, ymax = upper_ci), shape = 21,color = "black",fill=NA,size = 3, stroke=1, data = my_data_booted_summary)+#
#
geom_point(aes(y = median), shape = 21,color = "black",fill=NA,size = 3, data = df_summary) +#
ggtitle("Median and 95%CI")  +ylab("Value [-]")+theme_light(base_size = 14) + theme(panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) + theme(axis.text.y = element_text(size=12))+theme(legend.position="none")+ ylim(0.5,1.5)+coord_flip()#
#
########### PLOT with distribution of differences, median difference and Confidence Interval #########
effectplot <- ggplot(df_differences, aes(x = Condition, y = diff_median))+#
geom_flat_violin(aes(x=Condition, fill=Condition),position = position_nudge(x = 0, y = 0), color=NA, data = df_differences)+ geom_linerange(aes(y= diff_median, ymin = ci_median_lo, ymax = ci_median_hi), color="black", size =1, data = df_diff_summary)+#
geom_point(aes(y = diff_median), shape = 21,color = "black",fill=NA,size = 3,data = df_diff_summary)+#
#
geom_hline(yintercept = 0, col = "black", size = .5) +#
ggtitle("Difference of medians")+ylab("Difference [-]")+theme_light(base_size = 14) + theme(panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) + theme(axis.text.y = element_text(size=12))+ ylim(-0.05,0.3)+coord_flip()#
 grid.arrange(medianplot, effectplot, ncol=2, nrow=1)
df_raw_data <- read.csv("surfdrive/R-project/Effect-Median/Cdc42_slopes.csv")
#Requires a new geom for ggplot2 that plots half of a violin plot (for the distribution of bootstrapped differences)#
source("surfdrive/R-project/Effect-Median/geom_flat_violin.R")#
#
#Function that resamples a vector (with replacement) and calculates the median value#
boot_median = function(x) {#
  median(sample(x, replace = TRUE))#
}#
#
#Number of bootstrap samples#
nsteps=1000#
#
#Confidence level#
Confidence_level = 0.95#
#
alpha=1-Confidence_level#
lower_percentile=(alpha/2)#
upper_percentile=1-(alpha/2)#
#
i=0
#Read the (tidy) data in csv format#
df_raw_data <- read.csv("surfdrive/R-project/Effect-Median/Cdc42_slopes.csv")#
#
#Generate a dataframe that keeps a summary of the data#
df_summary <- data.frame(Condition=levels(df_raw_data$Condition), n=tapply(df_raw_data$ratio, df_raw_data$Condition, length), median=tapply(df_raw_data$ratio, df_raw_data$Condition, median))#
#
#Generate a dataframe that collects all bootstrapped median values#
df_all_new_medians <- data.frame(Condition=levels(df_raw_data$Condition), resampled_median=tapply(df_raw_data$ratio, df_raw_data$Condition, boot_median), id=i)#
######################################################################################
######################## Calculate Median and 95%CI by bootstrap ####################
Perform the resampling nsteps number of times (typically 1,000-10,000x)#
for (i in 1:nsteps) {#
#
	#Caclulate the median from a boostrapped sample (resampled_median) and add to the dataframe#
	df_boostrapped_median <- data.frame(Condition=levels(df_raw_data$Condition), resampled_median=tapply(df_raw_data$ratio, df_raw_data$Condition, boot_median), id=i)#
	#Add the new median to a datafram that collects all the resampled median values#
	df_all_new_medians <- bind_rows(df_all_new_medians, df_boostrapped_median)#
#
}#
#Uncomment to plot result of the bootsrap#
#ggplot(df_all_new_medians, aes(Condition, resampled_median)) + geom_flat_violin(aes(fill=Condition), position = position_nudge(x = .2, y = 0))#
#Calculate the confidence interval of the boostrapped medians, based on percentiles, and add to the dataframe that summarizes the data#
df_summary$ci_median_hi <- tapply(df_all_new_medians$resampled_median, df_all_new_medians$Condition, quantile, probs=upper_percentile)#
df_summary$ci_median_lo <- tapply(df_all_new_medians$resampled_median, df_all_new_medians$Condition, quantile, probs=lower_percentile)#
######################################################################################
############ Generate dataframe with differences between the Median and 95%CI  #######
#
#Order by Condition#
#df_all_new_medians[order(df_all_new_medians$Condition),]#
#
#Convert the boostrapped dataset from long to wide format#
df_spread <- spread(df_all_new_medians, key=Condition, value=resampled_median)#
#
#Subtract the Column with " Control" from the other columns and move these 'differences' into a new dataframe#
df_spread_differences <- df_spread[,2:ncol(df_spread)] - df_spread[," Control"]#
#
#Convert the dataframe with differences between medians into a long format#
df_differences <- gather(df_spread_differences, Condition, diff_median)#
#
#Calculate the summary of the differences and put these values in a dataframe 'df_diff_summary'#
df_diff_summary <- data.frame(Condition=levels(df_raw_data$Condition), diff_median=tapply(df_differences$diff_median, df_differences$Condition, median))#
#
#Determine the CI of the differences, based on percentiles, and add to the dataframe that summarizes the differences#
df_diff_summary$ci_median_hi <- tapply(df_differences$diff_median, df_differences$Condition, quantile, probs=upper_percentile)#
df_diff_summary$ci_median_lo <- tapply(df_differences$diff_median, df_differences$Condition, quantile, probs=lower_percentile)
#Generate a dataframe that keeps a summary of the data#
df_summary <- data.frame(Condition=levels(df_raw_data$Condition), n=tapply(df_raw_data$ratio, df_raw_data$Condition, length), median=tapply(df_raw_data$ratio, df_raw_data$Condition, median))
df_summary <- data.frame(Condition=levels(df_raw_data$Condition), n=tapply(df_raw_data$ratio, df_raw_data$Condition, length), median=tapply(df_raw_data$ratio, df_raw_data$Condition, median))
# Script that:#
# Reads csv file (with header), assuming the first serie is the control#
# Calculates median and 95%CI by a percentile bootstrap#
# Calculates the difference between medians and the 95%CI, reflecting the magnitude and uncertainty of the difference#
# Plots: (A) the data, the median and 95% CI (B) median difference and the 95%CI + the distribution of median differences#
#
# Created by: #
# Joachim Goedhart, @joachimgoedhart, 2018#
#Requires the packages ggplot2, gridExtra, tidyr#
require(ggplot2)#
require(gridExtra)#
require(tidyr)#
#
#Requires a new geom for ggplot2 that plots half of a violin plot (for the distribution of bootstrapped differences)#
source("surfdrive/R-project/Effect-Median/geom_flat_violin.R")#
#
#Function that resamples a vector (with replacement) and calculates the median value#
boot_median = function(x) {#
  median(sample(x, replace = TRUE))#
}#
#
#Number of bootstrap samples#
nsteps=1000#
#
#Confidence level#
Confidence_Percentage = 99#
Confidence_level = Confidence_Percentage/100#
#
alpha=1-Confidence_level#
lower_percentile=(1-Confidence_level)/2#
upper_percentile=1-((1-Confidence_level)/2)#
#
i=0#
#
#Read the (tidy) data in csv format#
df_raw_wide <- read.csv("surfdrive/R-project/Effect-Median/Data_wide.csv")#
#
#Force the first column to be labeled as "Control"#
colnames(df_raw_wide)[1] <- "Control"#
#
#Convert the wide data to a long format (and remove NA)#
df_raw_data <-  na.omit(gather(df_raw_wide, Condition, value))#
#Generate a dataframe that keeps a summary of the data#
df_summary <- data.frame(Condition=levels(factor(df_raw_data$Condition)), n=tapply(df_raw_data$value, df_raw_data$Condition, length), median=tapply(df_raw_data$value, df_raw_data$Condition, median))#
#
#Generate a dataframe that collects all bootstrapped median values#
df_all_new_medians <- data.frame(Condition=levels(factor(df_raw_data$Condition)), resampled_median=tapply(df_raw_data$value, df_raw_data$Condition, boot_median), id=i)#
######################################################################################
######################## Calculate Median and 95%CI by bootstrap ####################
#Perform the resampling nsteps number of times (typically 1,000-10,000x)#
for (i in 1:nsteps) {#
#
	#Caclulate the median from a boostrapped sample (resampled_median) and add to the dataframe#
	df_boostrapped_median <- data.frame(Condition=levels(factor(df_raw_data$Condition)), resampled_median=tapply(df_raw_data$value, df_raw_data$Condition, boot_median), id=i)#
	#Add the new median to a datafram that collects all the resampled median values#
	df_all_new_medians <- bind_rows(df_all_new_medians, df_boostrapped_median)#
#
}#
#Uncomment to plot result of the bootsrap#
#ggplot(df_all_new_medians, aes(Condition, resampled_median)) + geom_flat_violin(aes(fill=Condition), position = position_nudge(x = .2, y = 0))#
#Calculate the confidence interval of the boostrapped medians, based on percentiles, and add to the dataframe that summarizes the data#
df_summary$ci_median_hi <- tapply(df_all_new_medians$resampled_median, df_all_new_medians$Condition, quantile, probs=upper_percentile)#
df_summary$ci_median_lo <- tapply(df_all_new_medians$resampled_median, df_all_new_medians$Condition, quantile, probs=lower_percentile)#
######################################################################################
############ Generate dataframe with differences between the Median and 95%CI  #######
#
#Order by Condition#
#df_all_new_medians[order(df_all_new_medians$Condition),]#
#
#Convert the boostrapped dataset from long to wide format#
df_spread <- spread(df_all_new_medians, key=Condition, value=resampled_median)#
#
#Subtract the Column with " Control" from the other columns and move these 'differences' into a new dataframe#
df_spread_differences <- df_spread[,2:ncol(df_spread)] - df_spread[,"Control"]#
#
#Convert the dataframe with differences between medians into a long format#
df_differences <- gather(df_spread_differences, Condition, diff_median)#
#
#Calculate the summary of the differences and put these values in a dataframe 'df_diff_summary'#
df_diff_summary <- data.frame(Condition=levels(factor(df_raw_data$Condition)), diff_median=tapply(df_differences$diff_median, df_differences$Condition, median))#
#
#Determine the CI of the differences, based on percentiles, and add to the dataframe that summarizes the differences#
df_diff_summary$ci_median_hi <- tapply(df_differences$diff_median, df_differences$Condition, quantile, probs=upper_percentile)#
df_diff_summary$ci_median_lo <- tapply(df_differences$diff_median, df_differences$Condition, quantile, probs=lower_percentile)#
#Sort dataframe Conditions according to median value#
df_summary$Condition <- reorder (df_summary$Condition, df_summary$median)#
df_raw_data$Condition <- reorder (df_raw_data$Condition, df_raw_data$value, median)#
#
#Sort dataframe Conditions according to median difference#
df_diff_summary$Condition <- reorder (df_diff_summary$Condition, df_diff_summary$diff_median)#
df_differences$Condition <- reorder (df_differences$Condition, df_differences$diff_median)#
#
##################### Generate plots for output ####################
#
######### PLOT with raw data + median and Confidence Interval #########
medianplot <- ggplot(df_summary, aes(x = Condition, y = median, color=Condition))+geom_jitter(data = df_raw_data, aes(x=Condition, y=value), position=position_jitter(0.3), cex=1, alpha=0.4)+#
 geom_linerange(aes(ymin = ci_median_lo, ymax = ci_median_hi), color="black", size =1, data = df_summary)+#
geom_point(aes(y = median), shape = 21,color = "black",fill=NA,size = 3, data = df_summary)+#
ggtitle(paste("Median and ",Confidence_Percentage,"%CI",sep=""))  +#
ylab("Value [-]")+theme_light(base_size = 14) + #
theme(panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) + theme(axis.text.y = element_text(size=12))+theme(legend.position="none")+#
#Set the axis limits here - autoscale if not set#
#ylim(-0.02,0.3)+#
coord_flip()#
#
########### PLOT with distribution of differences, median difference and Confidence Interval #########
effectplot <- ggplot(df_differences, aes(x = Condition, y = diff_median))+#
geom_flat_violin(aes(x=Condition, fill=Condition),position = position_nudge(x = 0, y = 0), color=NA,scale = "width", alpha =0.7,data = df_differences)+ geom_linerange(aes(y= diff_median, ymin = ci_median_lo, ymax = ci_median_hi), color="black", size =1, data = df_diff_summary)+#
geom_point(aes(y = diff_median), shape = 21,color = "black",fill=NA,size = 3,data = df_diff_summary)+#
#
geom_hline(yintercept = 0, col = "black", size = .5) +#
ggtitle(paste("Difference and ",Confidence_Percentage,"%CI",sep=""))+ylab("Difference [-]")+theme_light(base_size = 14) + theme(panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) + theme(axis.text.y = element_text(size=12))+#
#Set the axis limits here - autoscale if not set#
#ylim(-0.05,0.3)+#
coord_flip()#
 grid.arrange(medianplot, effectplot, ncol=2, nrow=1)
ggplot(df_summary, aes(x = Condition, y = median, color=Condition))+geom_jitter(data = df_raw_data, aes(x=Condition, y=value), position=position_jitter(0.3), cex=1, alpha=0.4)+#
 geom_linerange(aes(ymin = ci_median_lo, ymax = ci_median_hi), color="black", size =1, data = df_summary)+#
geom_point(aes(y = median), shape = 21,color = "black",fill=NA,size = 3, data = df_summary)+#
ggtitle(paste("Median and ",Confidence_Percentage,"%CI",sep=""))  +#
ylab("Value [-]")+theme_light(base_size = 14) + #
theme(panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) + theme(axis.text.y = element_text(size=12))+theme(legend.position="none")+#
#Set the axis limits here - autoscale if not set#
#ylim(-0.02,0.3)+#
coord_flip()
df_raw_wide <- read.csv("surfdrive/R-project/Effect-Median/Cdc42_slopes.csv")
#Force the first column to be labeled as "Control"#
colnames(df_raw_wide)[1] <- "Control"#
#
#Convert the wide data to a long format (and remove NA)#
df_raw_data <-  na.omit(gather(df_raw_wide, Condition, value))#
#Generate a dataframe that keeps a summary of the data#
df_summary <- data.frame(Condition=levels(factor(df_raw_data$Condition)), n=tapply(df_raw_data$value, df_raw_data$Condition, length), median=tapply(df_raw_data$value, df_raw_data$Condition, median))#
#
#Generate a dataframe that collects all bootstrapped median values#
df_all_new_medians <- data.frame(Condition=levels(factor(df_raw_data$Condition)), resampled_median=tapply(df_raw_data$value, df_raw_data$Condition, boot_median), id=i)#
######################################################################################
######################## Calculate Median and 95%CI by bootstrap ####################
#Perform the resampling nsteps number of times (typically 1,000-10,000x)#
for (i in 1:nsteps) {#
#
	#Caclulate the median from a boostrapped sample (resampled_median) and add to the dataframe#
	df_boostrapped_median <- data.frame(Condition=levels(factor(df_raw_data$Condition)), resampled_median=tapply(df_raw_data$value, df_raw_data$Condition, boot_median), id=i)#
	#Add the new median to a datafram that collects all the resampled median values#
	df_all_new_medians <- bind_rows(df_all_new_medians, df_boostrapped_median)#
#
}#
#Uncomment to plot result of the bootsrap#
#ggplot(df_all_new_medians, aes(Condition, resampled_median)) + geom_flat_violin(aes(fill=Condition), position = position_nudge(x = .2, y = 0))#
#Calculate the confidence interval of the boostrapped medians, based on percentiles, and add to the dataframe that summarizes the data#
df_summary$ci_median_hi <- tapply(df_all_new_medians$resampled_median, df_all_new_medians$Condition, quantile, probs=upper_percentile)#
df_summary$ci_median_lo <- tapply(df_all_new_medians$resampled_median, df_all_new_medians$Condition, quantile, probs=lower_percentile)#
######################################################################################
############ Generate dataframe with differences between the Median and 95%CI  #######
#
#Order by Condition#
#df_all_new_medians[order(df_all_new_medians$Condition),]#
#
#Convert the boostrapped dataset from long to wide format#
df_spread <- spread(df_all_new_medians, key=Condition, value=resampled_median)#
#
#Subtract the Column with " Control" from the other columns and move these 'differences' into a new dataframe#
df_spread_differences <- df_spread[,2:ncol(df_spread)] - df_spread[,"Control"]#
#
#Convert the dataframe with differences between medians into a long format#
df_differences <- gather(df_spread_differences, Condition, diff_median)#
#
#Calculate the summary of the differences and put these values in a dataframe 'df_diff_summary'#
df_diff_summary <- data.frame(Condition=levels(factor(df_raw_data$Condition)), diff_median=tapply(df_differences$diff_median, df_differences$Condition, median))#
#
#Determine the CI of the differences, based on percentiles, and add to the dataframe that summarizes the differences#
df_diff_summary$ci_median_hi <- tapply(df_differences$diff_median, df_differences$Condition, quantile, probs=upper_percentile)#
df_diff_summary$ci_median_lo <- tapply(df_differences$diff_median, df_differences$Condition, quantile, probs=lower_percentile)#
#Sort dataframe Conditions according to median value#
df_summary$Condition <- reorder (df_summary$Condition, df_summary$median)#
df_raw_data$Condition <- reorder (df_raw_data$Condition, df_raw_data$value, median)#
#
#Sort dataframe Conditions according to median difference#
df_diff_summary$Condition <- reorder (df_diff_summary$Condition, df_diff_summary$diff_median)#
df_differences$Condition <- reorder (df_differences$Condition, df_differences$diff_median)#
#
##################### Generate plots for output
ggplot(df_summary, aes(x = Condition, y = median, color=Condition))+geom_jitter(data = df_raw_data, aes(x=Condition, y=value), position=position_jitter(0.3), cex=1, alpha=0.4)+#
 geom_linerange(aes(ymin = ci_median_lo, ymax = ci_median_hi), color="black", size =1, data = df_summary)+#
geom_point(aes(y = median), shape = 21,color = "black",fill=NA,size = 3, data = df_summary)+#
ggtitle(paste("Median and ",Confidence_Percentage,"%CI",sep=""))  +#
ylab("Value [-]")+theme_light(base_size = 14) + #
theme(panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) + theme(axis.text.y = element_text(size=12))+theme(legend.position="none")+#
#Set the axis limits here - autoscale if not set#
#ylim(-0.02,0.3)+#
coord_flip()
require(ggplot2)#
require(gridExtra)#
require(tidyr)#
#
#Requires a new geom for ggplot2 that plots half of a violin plot (for the distribution of bootstrapped differences)#
source("surfdrive/R-project/Effect-Median/geom_flat_violin.R")#
#
#Function that resamples a vector (with replacement) and calculates the median value#
boot_median = function(x) {#
  median(sample(x, replace = TRUE))#
}#
#
#Number of bootstrap samples#
nsteps=1000#
#
#Confidence level#
Confidence_Percentage = 95#
Confidence_level = Confidence_Percentage/100#
#
alpha=1-Confidence_level#
lower_percentile=(1-Confidence_level)/2#
upper_percentile=1-((1-Confidence_level)/2)
i=0#
#
#Read the (tidy) data in csv format#
df_raw_wide <- read.csv("surfdrive/R-project/Effect-Median/Cdc42_slopes.csv")#
#
#Force the first column to be labeled as "Control"#
colnames(df_raw_wide)[1] <- "Control"#
#
#Convert the wide data to a long format (and remove NA)#
df_raw_data <-  na.omit(gather(df_raw_wide, Condition, value))#
#Generate a dataframe that keeps a summary of the data#
df_summary <- data.frame(Condition=levels(factor(df_raw_data$Condition)), n=tapply(df_raw_data$value, df_raw_data$Condition, length), median=tapply(df_raw_data$value, df_raw_data$Condition, median))#
#
#Generate a dataframe that collects all bootstrapped median values#
df_all_new_medians <- data.frame(Condition=levels(factor(df_raw_data$Condition)), resampled_median=tapply(df_raw_data$value, df_raw_data$Condition, boot_median), id=i)
#Perform the resampling nsteps number of times (typically 1,000-10,000x)#
for (i in 1:nsteps) {#
#
	#Caclulate the median from a boostrapped sample (resampled_median) and add to the dataframe#
	df_boostrapped_median <- data.frame(Condition=levels(factor(df_raw_data$Condition)), resampled_median=tapply(df_raw_data$value, df_raw_data$Condition, boot_median), id=i)#
	#Add the new median to a datafram that collects all the resampled median values#
	df_all_new_medians <- bind_rows(df_all_new_medians, df_boostrapped_median)#
#
}#
#Uncomment to plot result of the bootsrap#
#ggplot(df_all_new_medians, aes(Condition, resampled_median)) + geom_flat_violin(aes(fill=Condition), position = position_nudge(x = .2, y = 0))#
#Calculate the confidence interval of the boostrapped medians, based on percentiles, and add to the dataframe that summarizes the data#
df_summary$ci_median_hi <- tapply(df_all_new_medians$resampled_median, df_all_new_medians$Condition, quantile, probs=upper_percentile)#
df_summary$ci_median_lo <- tapply(df_all_new_medians$resampled_median, df_all_new_medians$Condition, quantile, probs=lower_percentile)
ggplot(df_summary, aes(x = Condition, y = median, color=Condition))+geom_jitter(data = df_raw_data, aes(x=Condition, y=value), position=position_jitter(0.3), cex=1, alpha=0.4)+#
 geom_linerange(aes(ymin = ci_median_lo, ymax = ci_median_hi), color="black", size =1, data = df_summary)+#
geom_point(aes(y = median), shape = 21,color = "black",fill=NA,size = 3, data = df_summary)+#
ggtitle(paste("Median and ",Confidence_Percentage,"%CI",sep=""))  +#
ylab("Value [-]")+theme_light(base_size = 14) + #
theme(panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) + theme(axis.text.y = element_text(size=12))+theme(legend.position="none")+#
#Set the axis limits here - autoscale if not set#
ylim(-0.02,0.3)+#
coord_flip()
#Sort dataframe Conditions according to median value#
df_summary$Condition <- reorder (df_summary$Condition, df_summary$median)#
df_raw_data$Condition <- reorder (df_raw_data$Condition, df_raw_data$value, median)#
#
#Sort dataframe Conditions according to median difference#
df_diff_summary$Condition <- reorder (df_diff_summary$Condition, df_diff_summary$diff_median)#
df_differences$Condition <- reorder (df_differences$Condition, df_differences$diff_median)
ggplot(df_summary, aes(x = Condition, y = median, color=Condition))+geom_jitter(data = df_raw_data, aes(x=Condition, y=value), position=position_jitter(0.3), cex=1, alpha=0.4)+#
 geom_linerange(aes(ymin = ci_median_lo, ymax = ci_median_hi), color="black", size =1, data = df_summary)+#
geom_point(aes(y = median), shape = 21,color = "black",fill=NA,size = 3, data = df_summary)+#
ggtitle(paste("Median and ",Confidence_Percentage,"%CI",sep=""))  +#
ylab("Value [-]")+theme_light(base_size = 14) + #
theme(panel.border = element_rect(size = 0.5, linetype = "solid", colour = "black", fill=NA)) + theme(axis.text.y = element_text(size=12))+theme(legend.position="none")+#
#Set the axis limits here - autoscale if not set#
ylim(-0.02,0.3)+#
coord_flip()
Sys.setenv(LANG="en_US.UTF-8")
Sys.setenv(LC_ALL="en_US.UTF-8")
shiny::runGitHub('PlotsOfData', 'JoachimGoedhart')
shiny::runGitHub('PlotTwist', 'JoachimGoedhart')
getwd()
df_tidy_example <- read.csv("Data_tidy_example.csv", na.strings = "")
head(df_tidy_example)
ggplot(data=df_tidy_example, x=conditions, y=Activity)
require(ggplot2)
ggplot(data=df_tidy_example, x=conditions, y=Activity)
p <-
p <- ggplot(data=df_tidy_example, x=conditions, y=Activity)
p + geom_boxplot()
p <- ggplot(data=df_tidy_example, aes(x=conditions, y=Activity))
p + geom_boxplot()
require(dplyr)
require(magrittr)
df_summary <- df_tidy_example %>%#
    group_by(conditions) %>% #
    summarise(n = n(),#
              mean = mean(Value),#
              SD = sd(Value),#
              median = median(Value),#
              MAD = mad(Value, constant=1),#
              IQR = IQR(Value))
df_summary <- df_tidy_example %>%#
    group_by(conditions) %>% #
    summarise(n = n(),#
              mean = mean(Activity),#
              SD = sd(Activity),#
              median = median(Activity),#
              MAD = mad(Activity, constant=1),#
              IQR = IQR(Activity))
df_summary <- df_tidy_example %>%#
+     group_by(conditions) %>% #
+     summarise(n = n(),#
+               mean = mean(Activity),#
+               SD = sd(Activity),#
+               median = median(Activity),#
+               MAD = mad(Activity, constant=1),#
+               IQR = IQR(Activity))
df_summary <- df_tidy_example %>%#
     group_by(conditions) %>% #
     summarise(n = n(),#
               mean = mean(Activity),#
               SD = sd(Activity),#
               median = median(Activity),#
               MAD = mad(Activity, constant=1),#
               IQR = IQR(Activity))
p <- ggplot(data=df_tidy_example, aes(x=conditions, y=Activity))#
p <-  p + geom_boxplot()#
p
head(df_summary)
head(df_tidy_example)
df_tidy_selected <- df_tidy_example %>% select(Condition = conditions , Value = Activity) %>% filter(!is.na(Value))
head(df_tidy_selected)
df_summary <- df_tidy_selected %>%#
     group_by(Condition) %>% #
     summarise(n = n(),#
               mean = mean(Value),#
               SD = sd(Value),#
               median = median(Value),#
               MAD = mad(Value, constant=1),#
               IQR = IQR(Value))
p <- ggplot(data=df_tidy_example, aes(x=conditions, y=Activity))#
p <-  p + geom_boxplot()#
p
p <- ggplot(data=df_tidy_selected, aes(x= Condition, y= Value))#
p <-  p + geom_boxplot()#
p
p <- ggplot(data=df_tidy_selected, aes(x= Condition, y= Value))#
p <-  p + geom_boxplot(notch=TRUE)#
p
p <- ggplot(data=df_tidy_selected, aes(x= Condition, y= Value))#
p <-  p + geom_boxplot(notch=TRUE)#
p <- p+geom_points()#
p
p <- ggplot(data=df_tidy_selected, aes(x= Condition, y= Value))#
p <-  p + geom_boxplot(notch=TRUE)#
p <- p+geom_points(data=df_tidy_selected)#
p
p <- ggplot(data=df_tidy_selected, aes(x= Condition, y= Value))#
p <-  p + geom_boxplot(notch=TRUE)#
p <- p+geom_point(data=df_tidy_selected)#
p
p <- ggplot(data=df_tidy_selected, aes(x= Condition, y= Value))#
p <-  p + geom_boxplot(notch=TRUE)#
p <- p+geom_point(data=df_tidy_selected, jitter)#
p
p <- ggplot(data=df_tidy_selected, aes(x= Condition, y= Value))#
p <-  p + geom_boxplot(notch=TRUE)#
p <- p+geom_point(data=df_tidy_selected, jitter=0.2)#
p
gg <-  ggplot_build(p)
gg$data[[1]]$notchlower
df_summary$IQR
tapply(df_tidy_selected$Value, df_tidy_selected$Condition, quantile, probs=0.25)
gg$data[[1]]$notchlower
gg$data[[1]]$notchlower <- tapply(df_tidy_selected$Value, df_tidy_selected$Condition, quantile, probs=0.25)
plot(ggplot_gtable(gg))
gg$data[[1]]$notchlower <- tapply(df_tidy_selected$Value, df_tidy_selected$Condition, quantile, probs=0.25)#
gg$data[[1]]$notchupper <- tapply(df_tidy_selected$Value, df_tidy_selected$Condition, quantile, probs=0.75)
p <- plot(ggplot_gtable(gg))
plot(ggplot_gtable(gg))
qt((1-.95)/2, n - 1)
qt((1-.95)/2, 1 - 1)
qt((1-.95)/2, 2 - 1)
qt((1-.95)/2, 3 - 1)
qt((1-.95)/2, 4 - 1)
qt((1-.95)/2, 5 - 1)
qt((1-.95)/2, 100 - 1)
qt((1-.95)/2, 1000 - 1)
qt((1-.95)/2, 15 - 1)
qt((1-.95)/2, 10 - 1)
qt((1-.95)/2, 5 - 1)
